// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/com/andrei/lexer.flex

package com.andrei;
import java_cup.runtime.*;
import java.util.*;
import com.andrei.tokens.Tokens;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\16\0"+
    "\1\6\1\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\5\0\1\15\1\16\1\17\2\0\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\0\1\37\1\40"+
    "\1\41\1\42\3\0\1\43\7\0\1\20\1\21\1\22"+
    "\1\44\1\24\1\25\1\26\1\27\1\30\1\0\1\31"+
    "\1\32\1\33\1\34\1\45\1\36\1\0\1\37\1\40"+
    "\1\46\1\42\3\0\1\43\2\0\1\47\10\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\26\0\1\7\1\10\20\0\1\11\10\0\1\12\12\0"+
    "\1\13\15\0\1\14\6\0\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\4\0\1\24\2\0\1\25\10\0"+
    "\1\26\1\0\1\27\1\0\1\30\10\0\1\31\20\0"+
    "\1\32\6\0\1\33\1\34\22\0\1\35\4\0\1\36"+
    "\17\0\1\37\1\40\14\0\1\41\1\42\1\43\1\44"+
    "\3\0\1\45\2\0\1\46\6\0\1\47\2\0\1\50"+
    "\4\0\1\51\4\0\1\52\3\0\1\53\1\0\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\50\0\120\0\50\0\170\0\50\0\50"+
    "\0\240\0\310\0\360\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8"+
    "\0\u01e0\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8"+
    "\0\u0320\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\50"+
    "\0\50\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528"+
    "\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668"+
    "\0\u0690\0\50\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780"+
    "\0\u07a8\0\u07d0\0\50\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\50\0\u0988\0\u09b0"+
    "\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0"+
    "\0\u0b18\0\u0b40\0\u0b68\0\50\0\u0b90\0\u0bb8\0\u0be0\0\u0c08"+
    "\0\u0c30\0\u0c58\0\50\0\50\0\50\0\50\0\50\0\50"+
    "\0\50\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\50\0\u0d20\0\u0d48"+
    "\0\50\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60"+
    "\0\u0e88\0\50\0\u0eb0\0\50\0\u0ed8\0\50\0\u0f00\0\u0f28"+
    "\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\50\0\u1040"+
    "\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180"+
    "\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\50"+
    "\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388\0\50\0\50"+
    "\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8"+
    "\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608"+
    "\0\u1630\0\u1658\0\50\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\50"+
    "\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838"+
    "\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928\0\u1950\0\50"+
    "\0\50\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68"+
    "\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\50\0\50\0\50"+
    "\0\50\0\u1b58\0\u1b80\0\u1ba8\0\50\0\u1bd0\0\u1bf8\0\50"+
    "\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8\0\50\0\u1d10"+
    "\0\u1d38\0\50\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\50\0\u1e00"+
    "\0\u1e28\0\u1e50\0\u1e78\0\50\0\u1ea0\0\u1ec8\0\u1ef0\0\50"+
    "\0\u1f18\0\50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\6\2\1\6"+
    "\1\7\1\10\20\2\1\11\6\2\1\11\52\0\1\3"+
    "\53\0\1\12\11\0\1\13\1\14\1\15\2\0\1\16"+
    "\1\0\1\17\1\20\1\0\1\21\1\0\1\22\1\23"+
    "\1\24\1\0\1\25\1\26\1\27\2\0\1\23\1\26"+
    "\1\30\37\0\1\31\7\0\1\31\21\0\1\32\3\0"+
    "\1\33\2\0\1\34\3\0\1\22\1\35\2\0\1\36"+
    "\4\0\1\35\1\0\1\37\17\0\1\40\47\0\1\41"+
    "\15\0\1\42\1\0\1\43\5\0\1\42\1\0\1\44"+
    "\24\0\1\45\22\0\1\45\35\0\1\46\1\0\1\47"+
    "\5\0\1\46\1\0\1\50\7\0\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\22\0\1\57\1\0\1\60\4\0"+
    "\1\60\1\61\17\0\1\62\13\0\1\63\1\64\12\0"+
    "\1\65\30\0\1\66\16\0\1\66\35\0\1\67\7\0"+
    "\1\67\1\0\1\67\32\0\1\70\3\0\1\71\10\0"+
    "\1\72\17\0\1\73\54\0\1\74\6\0\1\75\6\0"+
    "\1\76\4\0\1\77\20\0\1\100\1\101\1\0\1\102"+
    "\3\0\1\103\7\0\1\104\4\0\1\102\2\0\1\105"+
    "\17\0\1\106\12\0\1\107\14\0\1\107\7\0\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\2\0\1\40\1\100"+
    "\1\101\1\0\1\102\1\110\2\0\1\103\1\66\1\0"+
    "\1\107\1\111\1\64\1\112\1\71\1\113\1\0\1\60"+
    "\1\76\1\0\1\102\1\112\1\60\1\114\22\0\1\115"+
    "\24\0\1\115\35\0\1\42\7\0\1\42\1\0\1\42"+
    "\35\0\1\116\7\0\1\116\1\0\1\116\34\0\1\117"+
    "\12\0\1\117\36\0\1\71\10\0\1\71\24\0\1\120"+
    "\22\0\1\120\24\0\1\120\7\0\1\117\1\121\1\71"+
    "\6\0\1\121\1\0\1\122\23\0\1\123\20\0\1\123"+
    "\2\0\1\123\17\0\1\124\47\0\1\124\3\0\1\123"+
    "\20\0\1\123\2\0\1\123\34\0\1\125\12\0\1\125"+
    "\34\0\1\126\2\0\1\127\7\0\1\130\20\0\1\131"+
    "\26\0\1\131\20\0\1\131\13\0\1\126\2\0\1\127"+
    "\7\0\1\132\17\0\1\133\47\0\1\134\47\0\1\135"+
    "\47\0\1\136\47\0\1\137\47\0\1\140\47\0\1\141"+
    "\63\0\1\142\13\0\1\142\17\0\1\141\13\0\1\142"+
    "\13\0\1\142\26\0\1\143\20\0\1\143\36\0\1\144"+
    "\10\0\1\144\26\0\1\143\7\0\1\144\10\0\1\145"+
    "\17\0\1\146\14\0\1\147\12\0\1\147\25\0\1\150"+
    "\21\0\1\150\17\0\1\151\71\0\1\152\4\0\2\152"+
    "\17\0\1\151\21\0\1\152\4\0\2\152\32\0\1\153"+
    "\14\0\1\153\20\0\1\154\26\0\1\154\21\0\1\155"+
    "\14\0\1\156\10\0\1\156\20\0\1\154\1\155\10\0"+
    "\1\153\3\0\1\156\10\0\1\157\21\0\1\160\25\0"+
    "\1\160\35\0\1\161\7\0\1\161\1\0\1\161\17\0"+
    "\1\162\54\0\1\163\22\0\1\163\17\0\1\164\47\0"+
    "\1\164\1\0\1\160\2\0\1\163\10\0\1\161\7\0"+
    "\1\161\1\0\1\165\17\0\1\166\62\0\1\153\1\0"+
    "\1\125\12\0\1\167\20\0\1\154\5\0\1\143\20\0"+
    "\1\170\23\0\1\123\1\0\1\150\6\0\1\126\2\0"+
    "\1\127\4\0\1\123\2\0\1\171\17\0\1\164\1\131"+
    "\26\0\1\131\17\0\1\164\1\172\1\173\1\0\1\123"+
    "\1\163\1\150\1\143\3\0\1\153\1\142\1\174\1\161"+
    "\1\175\1\127\1\0\1\152\2\0\1\123\1\161\1\152"+
    "\1\176\16\0\1\177\65\0\1\200\2\0\1\201\7\0"+
    "\1\202\36\0\1\203\10\0\1\203\32\0\1\204\14\0"+
    "\1\204\23\0\1\123\1\0\1\150\6\0\1\200\2\0"+
    "\1\201\4\0\1\123\2\0\1\205\23\0\1\123\1\0"+
    "\1\150\4\0\1\204\1\0\1\200\1\0\1\203\1\201"+
    "\1\0\1\152\2\0\1\123\1\0\1\152\1\206\43\0"+
    "\1\207\3\0\1\207\41\0\1\210\4\0\2\210\41\0"+
    "\1\211\4\0\2\211\33\0\1\212\13\0\1\212\33\0"+
    "\1\212\5\0\1\211\4\0\1\211\1\213\33\0\1\214"+
    "\13\0\1\214\33\0\1\215\5\0\1\211\4\0\1\211"+
    "\1\216\32\0\1\217\14\0\1\217\17\0\1\220\72\0"+
    "\1\221\4\0\1\221\17\0\1\220\22\0\1\221\4\0"+
    "\1\221\31\0\1\222\15\0\1\222\37\0\1\223\7\0"+
    "\1\223\30\0\1\224\16\0\1\224\24\0\1\225\22\0"+
    "\1\225\32\0\1\226\14\0\1\226\17\0\1\227\47\0"+
    "\1\230\47\0\1\230\4\0\1\225\5\0\1\226\14\0"+
    "\1\231\32\0\1\232\14\0\1\232\23\0\1\233\20\0"+
    "\1\233\2\0\1\233\20\0\1\234\26\0\1\234\20\0"+
    "\1\234\2\0\1\233\6\0\1\232\11\0\1\233\2\0"+
    "\1\235\24\0\1\225\14\0\1\210\4\0\1\210\1\236"+
    "\17\0\1\220\12\0\1\226\14\0\1\226\33\0\1\212"+
    "\3\0\1\223\1\0\1\211\1\0\1\207\2\0\1\211"+
    "\1\237\32\0\1\226\1\214\13\0\1\240\17\0\1\227"+
    "\12\0\1\232\14\0\1\232\31\0\1\222\7\0\1\241"+
    "\4\0\1\241\1\242\17\0\1\230\22\0\1\221\4\0"+
    "\1\221\17\0\1\220\1\234\2\0\1\233\1\225\3\0"+
    "\1\224\1\222\1\243\1\215\3\0\1\223\1\0\1\241"+
    "\1\221\1\207\1\233\1\0\1\241\1\244\41\0\1\245"+
    "\4\0\2\245\33\0\1\246\13\0\1\246\33\0\1\246"+
    "\5\0\1\245\4\0\1\245\1\246\42\0\1\247\4\0"+
    "\1\247\24\0\1\250\22\0\1\250\33\0\1\246\3\0"+
    "\1\223\1\0\1\245\1\0\1\207\2\0\1\245\1\251"+
    "\24\0\1\250\3\0\1\224\2\0\1\246\3\0\1\223"+
    "\1\0\1\245\1\247\1\207\2\0\1\245\1\252\17\0"+
    "\1\253\54\0\1\254\22\0\1\254\5\0\1\255\47\0"+
    "\1\246\47\0\1\256\66\0\1\257\22\0\1\257\5\0"+
    "\1\246\16\0\1\257\22\0\1\257\5\0\1\256\16\0"+
    "\1\257\22\0\1\257\17\0\1\260\71\0\1\261\4\0"+
    "\2\261\5\0\1\262\62\0\1\263\26\0\1\263\35\0"+
    "\1\264\7\0\1\264\1\0\1\264\22\0\1\265\24\0"+
    "\1\265\32\0\1\266\14\0\1\266\22\0\1\265\7\0"+
    "\1\266\14\0\1\267\24\0\1\270\22\0\1\270\43\0"+
    "\1\271\3\0\1\271\23\0\1\272\20\0\1\272\2\0"+
    "\1\272\23\0\1\272\1\270\16\0\1\271\1\272\2\0"+
    "\1\270\22\0\1\265\1\0\1\254\22\0\1\273\5\0"+
    "\1\256\11\0\1\253\1\263\26\0\1\263\24\0\1\257"+
    "\5\0\1\266\14\0\1\274\5\0\1\255\16\0\1\254"+
    "\22\0\1\254\5\0\1\262\16\0\1\254\22\0\1\254"+
    "\17\0\1\260\4\0\1\270\5\0\1\266\14\0\1\270"+
    "\5\0\1\275\11\0\1\260\1\263\1\0\1\265\1\272"+
    "\1\276\5\0\1\266\2\0\1\264\3\0\1\261\1\0"+
    "\1\271\1\272\1\264\1\261\1\277\17\0\1\300\47\0"+
    "\1\301\71\0\1\302\4\0\2\302\22\0\1\303\24\0"+
    "\1\303\17\0\1\253\1\263\26\0\1\263\17\0\1\253"+
    "\1\263\1\0\1\303\12\0\1\264\3\0\1\302\3\0"+
    "\1\264\1\302\1\304\37\0\1\305\7\0\1\305\23\0"+
    "\1\306\43\0\1\301\3\0\1\306\31\0\1\307\32\0"+
    "\1\310\6\0\1\310\5\0\1\311\65\0\1\312\57\0"+
    "\1\313\13\0\1\313\34\0\1\314\12\0\1\314\41\0"+
    "\1\315\4\0\2\315\17\0\1\316\47\0\1\316\21\0"+
    "\1\315\4\0\2\315\17\0\1\317\47\0\1\320\47\0"+
    "\1\321\67\0\1\305\1\0\1\315\4\0\1\315\1\322"+
    "\5\0\1\307\11\0\1\316\20\0\1\310\6\0\1\310"+
    "\17\0\1\301\3\0\1\312\31\0\1\307\11\0\1\317"+
    "\17\0\1\305\1\310\6\0\1\323\5\0\1\307\11\0"+
    "\1\317\13\0\1\313\1\314\2\0\1\305\1\310\1\315"+
    "\4\0\1\315\1\324\17\0\1\325\71\0\1\326\4\0"+
    "\2\326\17\0\1\325\13\0\1\313\1\314\4\0\1\326"+
    "\4\0\1\326\1\327\17\0\1\330\75\0\1\331\25\0"+
    "\1\332\50\0\1\333\22\0\1\333\23\0\1\334\71\0"+
    "\1\335\26\0\1\336\22\0\1\336\17\0\1\337\35\0"+
    "\1\340\47\0\1\340\11\0\1\330\47\0\1\330\4\0"+
    "\1\333\22\0\1\333\5\0\1\340\11\0\1\337\4\0"+
    "\1\341\22\0\1\341\17\0\1\342\47\0\1\342\4\0"+
    "\1\336\22\0\1\336\46\0\1\245\46\0\1\343\43\0"+
    "\1\344\4\0\2\344\45\0\1\345\50\0\1\346\20\0"+
    "\1\347\53\0\1\350\43\0\1\347\21\0\1\344\4\0"+
    "\2\344\46\0\1\351\6\0\1\352\110\0\1\353\20\0"+
    "\1\354\75\0\1\355\10\0\1\356\64\0\1\357\32\0"+
    "\1\302\107\0\1\326\20\0\1\360\75\0\1\361\50\0"+
    "\1\362\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\2\11\1\1\26\0"+
    "\2\11\20\0\1\11\10\0\1\11\12\0\1\11\15\0"+
    "\1\11\6\0\7\11\4\0\1\11\2\0\1\11\10\0"+
    "\1\11\1\0\1\11\1\0\1\11\10\0\1\11\20\0"+
    "\1\11\6\0\2\11\22\0\1\11\4\0\1\11\17\0"+
    "\2\11\14\0\4\11\3\0\1\11\2\0\1\11\6\0"+
    "\1\11\2\0\1\11\4\0\1\11\4\0\1\11\3\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Any character*/
            }
            // fall through
          case 45: break;
          case 2:
            { System.out.println("White space");
            }
            // fall through
          case 46: break;
          case 3:
            { System.out.println("SLASH");
            }
            // fall through
          case 47: break;
          case 4:
            { System.out.println("LT");
            }
            // fall through
          case 48: break;
          case 5:
            { System.out.println("EQUAL");
            }
            // fall through
          case 49: break;
          case 6:
            { System.out.println("GT");
            }
            // fall through
          case 50: break;
          case 7:
            { System.out.println("A");
            }
            // fall through
          case 51: break;
          case 8:
            { System.out.println("B");
            }
            // fall through
          case 52: break;
          case 9:
            { System.out.println("I");
            }
            // fall through
          case 53: break;
          case 10:
            { System.out.println("P");
            }
            // fall through
          case 54: break;
          case 11:
            { System.out.println("U");
            }
            // fall through
          case 55: break;
          case 12:
            { System.out.println("BR");
            }
            // fall through
          case 56: break;
          case 13:
            { System.out.println("H1");
            }
            // fall through
          case 57: break;
          case 14:
            { System.out.println("H2");
            }
            // fall through
          case 58: break;
          case 15:
            { System.out.println("H3");
            }
            // fall through
          case 59: break;
          case 16:
            { System.out.println("H4");
            }
            // fall through
          case 60: break;
          case 17:
            { System.out.println("H5");
            }
            // fall through
          case 61: break;
          case 18:
            { System.out.println("H6");
            }
            // fall through
          case 62: break;
          case 19:
            { System.out.println("HR");
            }
            // fall through
          case 63: break;
          case 20:
            { System.out.println("LI");
            }
            // fall through
          case 64: break;
          case 21:
            { System.out.println("OL");
            }
            // fall through
          case 65: break;
          case 22:
            { System.out.println("TD");
            }
            // fall through
          case 66: break;
          case 23:
            { System.out.println("TR");
            }
            // fall through
          case 67: break;
          case 24:
            { System.out.println("UL");
            }
            // fall through
          case 68: break;
          case 25:
            { System.out.println("SRC");
            }
            // fall through
          case 69: break;
          case 26:
            { System.out.println("IMG");
            }
            // fall through
          case 70: break;
          case 27:
            { System.out.println("SUB");
            }
            // fall through
          case 71: break;
          case 28:
            { System.out.println("SUP");
            }
            // fall through
          case 72: break;
          case 29:
            { System.out.println("BODY");
            }
            // fall through
          case 73: break;
          case 30:
            { System.out.println("HTML");
            }
            // fall through
          case 74: break;
          case 31:
            { System.out.println("FONT");
            }
            // fall through
          case 75: break;
          case 32:
            { System.out.println("FORM");
            }
            // fall through
          case 76: break;
          case 33:
            { System.out.println("SMALL");
            }
            // fall through
          case 77: break;
          case 34:
            { System.out.println("TABLE");
            }
            // fall through
          case 78: break;
          case 35:
            { System.out.println("TBODY");
            }
            // fall through
          case 79: break;
          case 36:
            { System.out.println("THEAD");
            }
            // fall through
          case 80: break;
          case 37:
            { System.out.println("INPUT");
            }
            // fall through
          case 81: break;
          case 38:
            { System.out.println("CENTER");
            }
            // fall through
          case 82: break;
          case 39:
            { System.out.println("OPTION");
            }
            // fall through
          case 83: break;
          case 40:
            { System.out.println("SELECT");
            }
            // fall through
          case 84: break;
          case 41:
            { System.out.println("NOFRAME");
            }
            // fall through
          case 85: break;
          case 42:
            { System.out.println("LINK");
            }
            // fall through
          case 86: break;
          case 43:
            { System.out.println("FRAME");
            }
            // fall through
          case 87: break;
          case 44:
            { System.out.println("FRAMESET");
            }
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
