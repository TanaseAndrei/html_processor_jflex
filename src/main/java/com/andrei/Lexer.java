// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package com.andrei;
import java_cup.runtime.*;
import java.util.*;
import com.andrei.tokens.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\0"+
    "\1\6\14\0\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\5\0\1\16\1\17\1\20\2\0\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\0\1\32\1\33\1\34\1\35\1\36\1\37\1\0"+
    "\1\40\1\41\1\42\1\43\3\0\1\44\7\0\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\0\1\32\1\33\1\34\1\35\1\36\1\37\1\0"+
    "\1\40\1\41\1\42\1\43\3\0\1\44\2\0\1\45"+
    "\1\46\7\0\1\3\32\0\1\5\u01df\0\1\5\177\0"+
    "\13\5\35\0\2\3\5\0\1\5\57\0\1\5\240\0"+
    "\1\5\377\0\u0100\47";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\27\0\1\3\1\4\32\0"+
    "\1\5\11\0\1\6\1\0\1\3\10\0\1\7\11\0"+
    "\1\10\6\0\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\0\1\17\5\0\1\20\2\0\1\21\7\0\1\22"+
    "\1\23\1\0\1\24\1\0\1\25\37\0\1\26\1\27"+
    "\24\0\1\30\1\0\1\31\1\32\1\0\1\33\1\34"+
    "\4\0\1\35\21\0\1\36\4\0\1\37\2\0\1\40"+
    "\1\41\1\42\1\43\3\0\1\44\5\0\1\45\1\0"+
    "\1\46\2\0\1\47\1\50\2\0\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\50\0\120\0\170\0\240\0\310\0\360"+
    "\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230"+
    "\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370"+
    "\0\u0398\0\u03c0\0\u03e8\0\u0410\0\50\0\50\0\u0438\0\u0460"+
    "\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0"+
    "\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0"+
    "\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820"+
    "\0\50\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938"+
    "\0\u0960\0\u0988\0\50\0\u09b0\0\u06e0\0\u09d8\0\u0a00\0\u0a28"+
    "\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\50\0\u0b18\0\u0b40"+
    "\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\50"+
    "\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\50\0\50"+
    "\0\50\0\50\0\50\0\50\0\u0d70\0\50\0\u0d98\0\u0dc0"+
    "\0\u0de8\0\u0e10\0\u0e38\0\50\0\u0e60\0\u0e88\0\50\0\u0eb0"+
    "\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\50\0\50"+
    "\0\u0fc8\0\50\0\u0ff0\0\50\0\u1018\0\u1040\0\u1068\0\u1090"+
    "\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0"+
    "\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310"+
    "\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450"+
    "\0\u1478\0\u14a0\0\u14c8\0\50\0\50\0\u14f0\0\u1518\0\u1540"+
    "\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680"+
    "\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0"+
    "\0\u17e8\0\50\0\u1810\0\50\0\50\0\u1838\0\50\0\50"+
    "\0\u1860\0\u1888\0\u18b0\0\u18d8\0\50\0\u1900\0\u1928\0\u1950"+
    "\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90"+
    "\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\u1b80\0\50\0\u1ba8"+
    "\0\u1bd0\0\u1bf8\0\u1c20\0\50\0\u1c48\0\u1c70\0\50\0\50"+
    "\0\50\0\50\0\u1c98\0\u1cc0\0\u1ce8\0\50\0\u1d10\0\u1d38"+
    "\0\u1d60\0\u1d88\0\u1db0\0\50\0\u1dd8\0\50\0\u1e00\0\u1e28"+
    "\0\50\0\50\0\u1e50\0\u1e78\0\u1e50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\11\2\1\5\30\2\53\0"+
    "\1\3\54\0\1\6\11\0\1\7\1\10\1\11\2\0"+
    "\1\12\1\0\1\13\1\14\1\0\1\15\1\0\1\16"+
    "\1\17\1\20\1\0\1\21\1\22\1\23\1\0\1\24"+
    "\23\0\1\7\1\25\1\11\2\0\1\26\1\0\1\27"+
    "\1\30\1\0\1\31\1\0\1\16\1\32\1\20\1\0"+
    "\1\33\1\22\1\23\1\0\1\34\22\0\1\35\47\0"+
    "\1\36\15\0\1\37\1\0\1\40\4\0\1\41\27\0"+
    "\1\42\17\0\1\42\40\0\1\43\1\0\1\44\4\0"+
    "\1\45\12\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\7\0\1\54\12\0\1\55\1\0\1\56\2\0\1\57"+
    "\22\0\1\60\13\0\1\61\1\62\7\0\1\63\33\0"+
    "\1\64\13\0\1\64\40\0\1\65\6\0\1\65\35\0"+
    "\1\66\3\0\1\67\5\0\1\70\22\0\1\71\63\0"+
    "\1\72\6\0\1\73\1\0\1\74\23\0\1\75\1\76"+
    "\1\0\1\77\3\0\1\100\7\0\1\101\4\0\1\102"+
    "\22\0\1\103\12\0\1\104\11\0\1\104\12\0\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\2\0\1\105\1\75"+
    "\1\76\1\0\1\77\1\106\2\0\1\100\1\64\1\0"+
    "\1\104\1\107\1\62\1\110\1\67\1\111\1\0\1\56"+
    "\1\73\1\0\1\112\22\0\1\36\15\0\1\37\6\0"+
    "\1\37\40\0\1\43\1\0\1\113\4\0\1\114\12\0"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\7\0\1\54"+
    "\14\0\1\56\2\0\1\115\22\0\1\116\60\0\1\117"+
    "\13\0\1\117\35\0\1\66\3\0\1\120\5\0\1\121"+
    "\27\0\1\122\6\0\1\72\6\0\1\73\1\0\1\123"+
    "\12\0\1\46\1\47\1\50\1\51\1\52\1\53\2\0"+
    "\1\35\1\75\1\76\1\0\1\77\1\124\2\0\1\100"+
    "\1\117\1\0\1\104\1\72\1\0\1\110\1\120\1\125"+
    "\1\0\1\56\1\73\1\0\1\126\26\0\1\127\20\0"+
    "\1\127\22\0\1\130\47\0\1\130\3\0\1\127\20\0"+
    "\1\127\37\0\1\131\7\0\1\131\37\0\1\132\2\0"+
    "\1\133\4\0\1\134\23\0\1\135\23\0\1\135\23\0"+
    "\1\135\13\0\1\132\2\0\1\133\4\0\1\136\22\0"+
    "\1\137\47\0\1\140\47\0\1\141\47\0\1\142\47\0"+
    "\1\143\47\0\1\144\50\0\1\145\23\0\1\145\22\0"+
    "\1\146\63\0\1\147\10\0\1\147\22\0\1\146\1\145"+
    "\12\0\1\147\10\0\1\150\50\0\1\116\30\0\1\151"+
    "\15\0\1\151\41\0\1\152\5\0\1\152\31\0\1\151"+
    "\7\0\1\152\5\0\1\153\22\0\1\154\14\0\1\155"+
    "\7\0\1\155\30\0\1\156\16\0\1\156\22\0\1\157"+
    "\71\0\1\160\2\0\1\160\22\0\1\157\21\0\1\160"+
    "\2\0\1\160\23\0\1\161\23\0\1\161\24\0\1\162"+
    "\14\0\1\163\5\0\1\163\23\0\1\161\1\162\14\0"+
    "\1\163\5\0\1\164\24\0\1\165\22\0\1\165\40\0"+
    "\1\166\6\0\1\166\22\0\1\167\47\0\1\170\4\0"+
    "\1\171\17\0\1\171\22\0\1\172\47\0\1\172\1\0"+
    "\1\165\2\0\1\171\10\0\1\166\6\0\1\173\22\0"+
    "\1\174\50\0\1\145\13\0\1\131\7\0\1\175\23\0"+
    "\1\161\5\0\1\151\15\0\1\176\26\0\1\127\1\0"+
    "\1\156\6\0\1\132\2\0\1\133\4\0\1\177\22\0"+
    "\1\172\1\135\23\0\1\135\22\0\1\172\1\200\1\201"+
    "\1\0\1\127\1\171\1\156\1\151\4\0\1\147\1\202"+
    "\1\166\1\203\1\133\1\0\1\160\2\0\1\204\23\0"+
    "\1\205\23\0\1\205\23\0\1\205\13\0\1\132\2\0"+
    "\1\133\4\0\1\206\23\0\1\145\12\0\1\147\10\0"+
    "\1\150\22\0\1\154\71\0\1\207\2\0\1\207\22\0"+
    "\1\157\21\0\1\207\2\0\1\207\35\0\1\210\11\0"+
    "\1\210\23\0\1\161\1\162\10\0\1\210\3\0\1\163"+
    "\5\0\1\211\23\0\1\145\11\0\1\210\1\0\1\131"+
    "\7\0\1\212\22\0\1\172\1\205\23\0\1\205\22\0"+
    "\1\172\1\213\1\201\1\0\1\127\1\171\1\156\4\0"+
    "\1\210\1\147\1\214\1\166\1\163\1\133\1\0\1\207"+
    "\2\0\1\215\46\0\2\216\44\0\1\217\2\0\1\217"+
    "\44\0\1\220\2\0\1\220\36\0\1\221\10\0\1\221"+
    "\36\0\1\221\5\0\1\220\2\0\1\221\36\0\1\222"+
    "\10\0\1\222\36\0\1\223\5\0\1\220\2\0\1\223"+
    "\26\0\1\224\20\0\1\224\35\0\1\225\11\0\1\225"+
    "\26\0\1\224\6\0\1\225\11\0\1\225\3\0\5\226"+
    "\105\0\1\227\1\0\1\227\3\0\5\226\35\0\1\227"+
    "\1\0\1\227\34\0\1\230\12\0\1\230\42\0\1\231"+
    "\4\0\1\231\33\0\1\232\13\0\1\232\35\0\1\233"+
    "\11\0\1\233\22\0\1\234\47\0\1\235\47\0\1\235"+
    "\12\0\1\233\11\0\1\233\35\0\1\236\11\0\1\236"+
    "\26\0\1\237\20\0\1\237\23\0\1\240\23\0\1\240"+
    "\23\0\1\240\2\0\1\237\6\0\1\236\11\0\1\241"+
    "\26\0\1\224\15\0\1\217\2\0\1\242\3\0\5\226"+
    "\25\0\1\233\11\0\1\233\36\0\1\221\3\0\1\231"+
    "\1\0\1\220\1\0\1\216\1\243\26\0\1\224\6\0"+
    "\1\233\1\222\10\0\1\244\22\0\1\234\12\0\1\236"+
    "\11\0\1\236\34\0\1\230\7\0\1\245\2\0\1\246"+
    "\22\0\1\235\22\0\1\227\1\0\1\227\3\0\5\226"+
    "\12\0\1\235\1\240\2\0\1\247\4\0\1\232\1\230"+
    "\1\250\1\223\3\0\1\231\1\0\1\245\1\227\1\216"+
    "\1\251\36\0\1\252\10\0\1\252\36\0\1\253\5\0"+
    "\1\220\2\0\1\253\33\0\1\254\13\0\1\254\27\0"+
    "\1\255\17\0\1\255\22\0\1\235\4\0\1\255\5\0"+
    "\1\233\11\0\1\256\26\0\1\224\1\255\14\0\1\217"+
    "\2\0\1\257\26\0\1\224\6\0\1\233\1\252\10\0"+
    "\1\260\44\0\1\245\2\0\1\245\22\0\1\235\1\240"+
    "\2\0\1\247\1\255\3\0\1\254\1\0\1\250\1\253"+
    "\3\0\1\231\1\0\1\245\1\0\1\216\1\261\22\0"+
    "\1\262\54\0\1\263\17\0\1\263\22\0\1\264\47\0"+
    "\1\265\54\0\1\266\17\0\1\266\22\0\1\265\4\0"+
    "\1\266\17\0\1\266\22\0\1\267\47\0\1\270\57\0"+
    "\1\271\10\0\1\272\3\0\1\273\44\0\1\274\2\0"+
    "\1\274\22\0\1\275\50\0\1\276\23\0\1\276\40\0"+
    "\1\277\6\0\1\277\35\0\1\300\11\0\1\300\27\0"+
    "\1\301\17\0\1\301\46\0\2\302\26\0\1\303\20\0"+
    "\1\303\26\0\1\303\1\301\16\0\1\302\1\301\22\0"+
    "\1\267\4\0\1\263\17\0\1\263\22\0\1\262\1\276"+
    "\23\0\1\276\22\0\1\267\4\0\1\266\5\0\1\300"+
    "\11\0\1\266\22\0\1\264\4\0\1\263\17\0\1\263"+
    "\22\0\1\275\4\0\1\263\17\0\1\263\22\0\1\267"+
    "\23\0\2\302\22\0\1\270\4\0\1\301\5\0\1\300"+
    "\11\0\1\301\22\0\1\270\1\276\2\0\1\303\1\304"+
    "\5\0\1\300\2\0\1\277\3\0\1\274\1\0\1\302"+
    "\1\305\27\0\1\306\17\0\1\306\22\0\1\265\4\0"+
    "\1\306\17\0\1\306\40\0\1\307\6\0\1\307\25\0"+
    "\1\310\21\0\1\310\25\0\1\310\7\0\1\300\11\0"+
    "\1\311\22\0\1\267\2\0\1\310\1\0\1\263\17\0"+
    "\1\312\22\0\1\267\4\0\1\306\5\0\1\300\11\0"+
    "\1\313\22\0\1\270\1\276\1\0\1\310\1\303\1\314"+
    "\5\0\1\300\2\0\1\307\5\0\1\302\1\315\42\0"+
    "\1\316\4\0\1\316\22\0\1\317\20\0\1\320\3\0"+
    "\1\320\42\0\1\321\4\0\1\321\42\0\1\322\4\0"+
    "\1\322\42\0\1\323\4\0\1\323\22\0\1\324\63\0"+
    "\1\325\10\0\1\325\37\0\1\326\7\0\1\326\22\0"+
    "\1\327\47\0\1\330\47\0\1\331\47\0\1\332\47\0"+
    "\1\317\17\0\1\316\1\320\3\0\1\333\22\0\1\317"+
    "\13\0\1\325\1\326\2\0\1\316\1\320\3\0\1\334"+
    "\43\0\1\320\3\0\1\320\37\0\1\335\7\0\1\335"+
    "\44\0\1\326\2\0\1\326\22\0\1\327\21\0\1\326"+
    "\2\0\1\326\42\0\1\316\1\0\1\326\2\0\1\326"+
    "\22\0\1\327\20\0\1\320\3\0\1\320\22\0\1\330"+
    "\17\0\1\316\1\320\3\0\1\333\22\0\1\330\13\0"+
    "\1\325\1\335\2\0\1\316\1\320\1\326\2\0\1\334"+
    "\22\0\1\336\54\0\1\337\17\0\1\337\27\0\1\340"+
    "\17\0\1\340\25\0\1\341\21\0\1\341\25\0\1\341"+
    "\1\0\1\340\17\0\1\342\27\0\1\343\17\0\1\343"+
    "\22\0\1\344\47\0\1\336\4\0\1\337\17\0\1\337"+
    "\22\0\1\344\4\0\1\345\17\0\1\345\22\0\1\346"+
    "\71\0\1\347\2\0\1\347\30\0\1\341\16\0\1\341"+
    "\21\0\1\350\47\0\1\350\6\0\1\341\16\0\1\341"+
    "\22\0\1\351\47\0\1\351\21\0\1\347\2\0\1\347"+
    "\22\0\1\352\35\0\1\353\41\0\2\353\3\0\1\353"+
    "\1\354\40\353\1\0\2\353\3\0\1\353\1\354\11\353"+
    "\1\355\26\353\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\27\0\2\11\32\0\1\11\11\0"+
    "\1\11\1\0\1\1\10\0\1\11\11\0\1\11\6\0"+
    "\6\11\1\0\1\11\5\0\1\11\2\0\1\11\7\0"+
    "\2\11\1\0\1\11\1\0\1\11\37\0\2\11\24\0"+
    "\1\11\1\0\2\11\1\0\2\11\4\0\1\11\21\0"+
    "\1\11\4\0\1\11\2\0\4\11\3\0\1\11\5\0"+
    "\1\11\1\0\1\11\2\0\2\11\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(int type){
        return new Token(type);
    }

    private Token token(int type, Object value){
        return new Token(type, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*ANY CHARACTER*/
            }
            // fall through
          case 42: break;
          case 2:
            { System.out.println("White space");
            }
            // fall through
          case 43: break;
          case 3:
            { return token(sym.A);
            }
            // fall through
          case 44: break;
          case 4:
            { return token(sym.B);
            }
            // fall through
          case 45: break;
          case 5:
            { return token(sym.P);
            }
            // fall through
          case 46: break;
          case 6:
            { return token(sym.U);
            }
            // fall through
          case 47: break;
          case 7:
            { return token(sym.I);
            }
            // fall through
          case 48: break;
          case 8:
            { return token(sym.BR);
            }
            // fall through
          case 49: break;
          case 9:
            { return token(sym.H1);
            }
            // fall through
          case 50: break;
          case 10:
            { return token(sym.H2);
            }
            // fall through
          case 51: break;
          case 11:
            { return token(sym.H3);
            }
            // fall through
          case 52: break;
          case 12:
            { return token(sym.H4);
            }
            // fall through
          case 53: break;
          case 13:
            { return token(sym.H5);
            }
            // fall through
          case 54: break;
          case 14:
            { return token(sym.H6);
            }
            // fall through
          case 55: break;
          case 15:
            { return token(sym.HR);
            }
            // fall through
          case 56: break;
          case 16:
            { return token(sym.LI);
            }
            // fall through
          case 57: break;
          case 17:
            { return token(sym.OL);
            }
            // fall through
          case 58: break;
          case 18:
            { return token(sym.TD);
            }
            // fall through
          case 59: break;
          case 19:
            { return token(sym.TH);
            }
            // fall through
          case 60: break;
          case 20:
            { return token(sym.TR);
            }
            // fall through
          case 61: break;
          case 21:
            { return token(sym.UL);
            }
            // fall through
          case 62: break;
          case 22:
            { return token(sym.SUB);
            }
            // fall through
          case 63: break;
          case 23:
            { return token(sym.SUP);
            }
            // fall through
          case 64: break;
          case 24:
            { return token(sym.BODY);
            }
            // fall through
          case 65: break;
          case 25:
            { return token(sym.FONT);
            }
            // fall through
          case 66: break;
          case 26:
            { return token(sym.FORM);
            }
            // fall through
          case 67: break;
          case 27:
            { return token(sym.HEAD);
            }
            // fall through
          case 68: break;
          case 28:
            { return token(sym.HTML);
            }
            // fall through
          case 69: break;
          case 29:
            { return token(sym.LINK);
            }
            // fall through
          case 70: break;
          case 30:
            { return token(sym.FRAME);
            }
            // fall through
          case 71: break;
          case 31:
            { return token(sym.INPUT);
            }
            // fall through
          case 72: break;
          case 32:
            { return token(sym.SMALL);
            }
            // fall through
          case 73: break;
          case 33:
            { return token(sym.TABLE);
            }
            // fall through
          case 74: break;
          case 34:
            { return token(sym.TBODY);
            }
            // fall through
          case 75: break;
          case 35:
            { return token(sym.THEAD);
            }
            // fall through
          case 76: break;
          case 36:
            { return token(sym.CENTER);
            }
            // fall through
          case 77: break;
          case 37:
            { return token(sym.SELECT);
            }
            // fall through
          case 78: break;
          case 38:
            { return token(sym.OPTION);
            }
            // fall through
          case 79: break;
          case 39:
            { return token(sym.NOFRAME);
            }
            // fall through
          case 80: break;
          case 40:
            { return token(sym.FRAMESET);
            }
            // fall through
          case 81: break;
          case 41:
            { return token(sym.IMG);
            }
            // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
