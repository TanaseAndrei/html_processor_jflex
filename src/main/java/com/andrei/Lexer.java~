// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package com.andrei;
import java_cup.runtime.*;
import java.util.*;
import com.andrei.tokens.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\0"+
    "\1\6\14\0\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\5\0\1\16\1\17\1\20\2\0\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\0\1\32\1\33\1\34\1\35\1\36\1\37\1\0"+
    "\1\40\1\41\1\42\1\43\3\0\1\44\7\0\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\0\1\32\1\33\1\34\1\35\1\36\1\37\1\0"+
    "\1\40\1\41\1\42\1\43\3\0\1\44\2\0\1\45"+
    "\10\0\1\3\32\0\1\5\u01df\0\1\5\177\0\13\5"+
    "\35\0\2\3\5\0\1\5\57\0\1\5\240\0\1\5"+
    "\377\0\u0100\46";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\25\0\1\3\1\4\20\0"+
    "\1\5\10\0\1\6\12\0\1\7\14\0\1\10\6\0"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\4\0"+
    "\1\20\2\0\1\21\10\0\1\22\1\23\1\0\1\24"+
    "\1\0\1\25\33\0\1\26\1\27\20\0\1\30\1\0"+
    "\1\31\1\32\1\0\1\33\4\0\1\34\20\0\1\35"+
    "\4\0\1\36\3\0\1\37\1\40\1\41\1\42\2\0"+
    "\1\43\5\0\1\44\1\45\3\0\1\46\1\47\2\0"+
    "\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\47\0\116\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a"+
    "\0\u0381\0\u03a8\0\47\0\47\0\u03cf\0\u03f6\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\47\0\u063f\0\u0666\0\u068d"+
    "\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\47\0\u0777\0\u079e"+
    "\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6"+
    "\0\47\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7"+
    "\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\47\0\u0ad1\0\u0af8"+
    "\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\47\0\47\0\47\0\47"+
    "\0\47\0\47\0\47\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\47"+
    "\0\u0c57\0\u0c7e\0\47\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41"+
    "\0\u0d68\0\u0d8f\0\u0db6\0\47\0\47\0\u0ddd\0\47\0\u0e04"+
    "\0\47\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15"+
    "\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d"+
    "\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185"+
    "\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\47\0\47\0\u1248\0\u126f"+
    "\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7"+
    "\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491\0\47\0\u14b8"+
    "\0\47\0\47\0\u14df\0\47\0\u1506\0\u152d\0\u1554\0\u157b"+
    "\0\47\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c"+
    "\0\u16b3\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4"+
    "\0\u17eb\0\47\0\u1812\0\u1839\0\u1860\0\u1887\0\47\0\u18ae"+
    "\0\u18d5\0\u18fc\0\47\0\47\0\47\0\47\0\u1923\0\u194a"+
    "\0\47\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\47\0\47"+
    "\0\u1a34\0\u1a5b\0\u1a82\0\47\0\47\0\u1aa9\0\u1ad0\0\u1aa9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\11\2\1\5\27\2\52\0"+
    "\1\3\53\0\1\6\11\0\1\7\1\10\1\11\2\0"+
    "\1\12\1\0\1\13\1\14\1\0\1\15\1\0\1\16"+
    "\1\17\1\20\1\0\1\21\1\22\1\23\1\0\1\24"+
    "\22\0\1\7\1\25\1\11\2\0\1\26\1\0\1\27"+
    "\1\30\1\0\1\31\1\0\1\16\1\17\1\20\1\0"+
    "\1\21\1\22\1\23\1\0\1\32\21\0\1\33\46\0"+
    "\1\34\15\0\1\35\1\0\1\36\4\0\1\37\26\0"+
    "\1\40\17\0\1\40\37\0\1\41\1\0\1\42\4\0"+
    "\1\43\11\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\22\0\1\52\1\0\1\53\2\0\1\54\21\0\1\55"+
    "\13\0\1\56\1\57\7\0\1\60\32\0\1\61\13\0"+
    "\1\61\37\0\1\62\6\0\1\62\34\0\1\63\3\0"+
    "\1\64\5\0\1\65\21\0\1\66\53\0\1\67\6\0"+
    "\1\70\6\0\1\71\1\0\1\72\22\0\1\73\1\74"+
    "\1\0\1\75\3\0\1\76\7\0\1\77\4\0\1\100"+
    "\21\0\1\101\12\0\1\102\11\0\1\102\11\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\2\0\1\33\1\73"+
    "\1\74\1\0\1\75\1\103\2\0\1\76\1\61\1\0"+
    "\1\102\1\104\1\57\1\105\1\64\1\106\1\0\1\53"+
    "\1\71\1\0\1\107\21\0\1\34\15\0\1\35\6\0"+
    "\1\35\37\0\1\41\1\0\1\110\4\0\1\111\11\0"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\24\0\1\53"+
    "\2\0\1\53\21\0\1\55\57\0\1\112\13\0\1\112"+
    "\11\0\1\44\1\45\1\46\1\47\1\50\1\51\2\0"+
    "\1\33\1\73\1\74\1\0\1\75\1\103\2\0\1\76"+
    "\1\112\1\0\1\102\1\70\1\0\1\105\1\64\1\113"+
    "\1\0\1\53\1\71\1\0\1\114\25\0\1\115\20\0"+
    "\1\115\21\0\1\116\46\0\1\116\3\0\1\115\20\0"+
    "\1\115\36\0\1\117\7\0\1\117\36\0\1\120\2\0"+
    "\1\121\4\0\1\122\22\0\1\123\23\0\1\123\22\0"+
    "\1\123\13\0\1\120\2\0\1\121\4\0\1\124\21\0"+
    "\1\125\46\0\1\126\46\0\1\127\46\0\1\130\46\0"+
    "\1\131\46\0\1\132\46\0\1\133\62\0\1\134\10\0"+
    "\1\134\21\0\1\133\13\0\1\134\10\0\1\134\30\0"+
    "\1\135\15\0\1\135\40\0\1\136\5\0\1\136\30\0"+
    "\1\135\7\0\1\136\5\0\1\137\21\0\1\140\14\0"+
    "\1\141\7\0\1\141\27\0\1\142\16\0\1\142\21\0"+
    "\1\143\70\0\1\144\2\0\1\144\21\0\1\143\21\0"+
    "\1\144\2\0\1\144\34\0\1\145\11\0\1\145\22\0"+
    "\1\146\23\0\1\146\23\0\1\147\14\0\1\150\5\0"+
    "\1\150\22\0\1\146\1\147\10\0\1\145\3\0\1\150"+
    "\5\0\1\151\23\0\1\152\22\0\1\152\37\0\1\153"+
    "\6\0\1\153\21\0\1\154\46\0\1\155\4\0\1\156"+
    "\17\0\1\156\21\0\1\157\46\0\1\157\1\0\1\152"+
    "\2\0\1\156\10\0\1\153\6\0\1\160\21\0\1\161"+
    "\61\0\1\145\1\0\1\117\7\0\1\162\22\0\1\146"+
    "\5\0\1\135\15\0\1\163\25\0\1\115\1\0\1\142"+
    "\6\0\1\120\2\0\1\121\4\0\1\164\21\0\1\157"+
    "\1\123\23\0\1\123\21\0\1\157\1\165\1\166\1\0"+
    "\1\115\1\156\1\142\1\135\3\0\1\145\1\134\1\167"+
    "\1\153\1\170\1\121\1\0\1\144\2\0\1\171\22\0"+
    "\1\172\23\0\1\172\22\0\1\172\13\0\1\120\2\0"+
    "\1\121\4\0\1\173\21\0\1\140\46\0\1\157\1\172"+
    "\23\0\1\172\21\0\1\157\1\174\1\166\1\0\1\115"+
    "\1\156\1\142\4\0\1\145\1\134\1\175\1\153\1\150"+
    "\1\121\1\0\1\144\2\0\1\176\45\0\2\177\43\0"+
    "\1\200\2\0\1\200\43\0\1\201\2\0\1\201\35\0"+
    "\1\202\10\0\1\202\35\0\1\202\5\0\1\201\2\0"+
    "\1\202\35\0\1\203\10\0\1\203\35\0\1\204\5\0"+
    "\1\201\2\0\1\204\34\0\1\205\11\0\1\205\2\0"+
    "\5\206\104\0\1\207\1\0\1\207\2\0\5\206\35\0"+
    "\1\207\1\0\1\207\33\0\1\210\12\0\1\210\41\0"+
    "\1\211\4\0\1\211\32\0\1\212\13\0\1\212\26\0"+
    "\1\213\17\0\1\213\34\0\1\214\11\0\1\214\21\0"+
    "\1\215\46\0\1\216\46\0\1\216\4\0\1\213\5\0"+
    "\1\214\11\0\1\217\34\0\1\220\11\0\1\220\25\0"+
    "\1\221\20\0\1\221\22\0\1\222\23\0\1\222\22\0"+
    "\1\222\2\0\1\221\6\0\1\220\11\0\1\223\26\0"+
    "\1\213\14\0\1\200\2\0\1\224\2\0\5\206\25\0"+
    "\1\214\11\0\1\214\35\0\1\202\3\0\1\211\1\0"+
    "\1\201\1\0\1\177\1\225\34\0\1\214\1\203\10\0"+
    "\1\226\21\0\1\215\12\0\1\220\11\0\1\220\33\0"+
    "\1\210\7\0\1\227\2\0\1\230\21\0\1\216\22\0"+
    "\1\207\1\0\1\207\2\0\5\206\12\0\1\216\1\222"+
    "\2\0\1\221\1\213\3\0\1\212\1\210\1\231\1\204"+
    "\3\0\1\211\1\0\1\227\1\207\1\177\1\232\35\0"+
    "\1\233\10\0\1\233\35\0\1\234\5\0\1\201\2\0"+
    "\1\234\34\0\1\214\1\233\10\0\1\235\43\0\1\227"+
    "\2\0\1\227\21\0\1\216\1\222\2\0\1\221\1\213"+
    "\3\0\1\212\1\0\1\231\1\234\3\0\1\211\1\0"+
    "\1\227\1\0\1\177\1\236\21\0\1\237\53\0\1\240"+
    "\17\0\1\240\21\0\1\241\46\0\1\242\53\0\1\243"+
    "\17\0\1\243\21\0\1\242\4\0\1\243\17\0\1\243"+
    "\21\0\1\244\56\0\1\245\10\0\1\246\3\0\1\247"+
    "\43\0\1\250\2\0\1\250\21\0\1\251\47\0\1\252"+
    "\23\0\1\252\37\0\1\253\6\0\1\253\24\0\1\254"+
    "\21\0\1\254\34\0\1\255\11\0\1\255\24\0\1\254"+
    "\7\0\1\255\11\0\1\256\26\0\1\257\17\0\1\257"+
    "\45\0\2\260\25\0\1\261\20\0\1\261\25\0\1\261"+
    "\1\257\16\0\1\260\1\257\24\0\1\254\1\0\1\240"+
    "\17\0\1\262\21\0\1\237\1\252\23\0\1\252\26\0"+
    "\1\243\5\0\1\255\11\0\1\243\21\0\1\241\4\0"+
    "\1\240\17\0\1\240\21\0\1\251\4\0\1\240\17\0"+
    "\1\240\21\0\1\244\4\0\1\257\5\0\1\255\11\0"+
    "\1\257\21\0\1\244\1\252\1\0\1\254\1\261\1\263"+
    "\5\0\1\255\2\0\1\253\3\0\1\250\1\0\1\260"+
    "\1\264\26\0\1\265\17\0\1\265\21\0\1\242\4\0"+
    "\1\265\17\0\1\265\26\0\1\265\5\0\1\255\11\0"+
    "\1\266\21\0\1\244\1\252\1\0\1\254\1\261\1\267"+
    "\5\0\1\255\2\0\1\253\5\0\1\260\1\270\41\0"+
    "\1\271\4\0\1\271\21\0\1\272\20\0\1\273\3\0"+
    "\1\273\41\0\1\274\4\0\1\274\41\0\1\275\4\0"+
    "\1\275\41\0\1\276\4\0\1\276\21\0\1\277\62\0"+
    "\1\300\10\0\1\300\36\0\1\301\7\0\1\301\43\0"+
    "\1\302\2\0\1\302\21\0\1\303\46\0\1\303\21\0"+
    "\1\302\2\0\1\302\21\0\1\304\46\0\1\305\46\0"+
    "\1\306\66\0\1\271\1\0\1\302\2\0\1\302\21\0"+
    "\1\272\17\0\1\271\1\273\3\0\1\307\21\0\1\272"+
    "\13\0\1\300\1\301\2\0\1\271\1\273\1\302\2\0"+
    "\1\310\42\0\1\273\3\0\1\273\21\0\1\303\20\0"+
    "\1\273\3\0\1\273\21\0\1\304\17\0\1\271\1\273"+
    "\3\0\1\307\21\0\1\304\13\0\1\300\1\301\2\0"+
    "\1\271\1\273\1\302\2\0\1\310\21\0\1\311\53\0"+
    "\1\312\17\0\1\312\26\0\1\313\17\0\1\313\24\0"+
    "\1\314\21\0\1\314\24\0\1\314\1\0\1\313\17\0"+
    "\1\315\26\0\1\316\17\0\1\316\21\0\1\317\46\0"+
    "\1\320\46\0\1\311\4\0\1\312\17\0\1\312\21\0"+
    "\1\320\4\0\1\321\17\0\1\321\43\0\1\322\2\0"+
    "\1\322\27\0\1\314\16\0\1\314\20\0\1\323\46\0"+
    "\1\323\6\0\1\314\16\0\1\314\21\0\1\324\46\0"+
    "\1\324\21\0\1\322\2\0\1\322\21\0\1\325\34\0"+
    "\1\326\40\0\2\326\3\0\1\326\1\327\37\326\1\0"+
    "\2\326\3\0\1\326\1\327\11\326\1\330\25\326\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6903];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\25\0\2\11\20\0\1\11\10\0"+
    "\1\11\12\0\1\11\14\0\1\11\6\0\7\11\4\0"+
    "\1\11\2\0\1\11\10\0\2\11\1\0\1\11\1\0"+
    "\1\11\33\0\2\11\20\0\1\11\1\0\2\11\1\0"+
    "\1\11\4\0\1\11\20\0\1\11\4\0\1\11\3\0"+
    "\4\11\2\0\1\11\5\0\2\11\3\0\2\11\2\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(int type){
        return new Token(type);
    }

    private Token token(int type, Object value){
        return new Token(type, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*ANY CHARACTER*/
            }
            // fall through
          case 41: break;
          case 2:
            { System.out.println("White space");
            }
            // fall through
          case 42: break;
          case 3:
            { return token(sym.A);
            }
            // fall through
          case 43: break;
          case 4:
            { return token(sym.B);
            }
            // fall through
          case 44: break;
          case 5:
            { return token(sym.I);
            }
            // fall through
          case 45: break;
          case 6:
            { return token(sym.P);
            }
            // fall through
          case 46: break;
          case 7:
            { return token(sym.U);
            }
            // fall through
          case 47: break;
          case 8:
            { return token(sym.BR);
            }
            // fall through
          case 48: break;
          case 9:
            { return token(sym.H1);
            }
            // fall through
          case 49: break;
          case 10:
            { return token(sym.H2);
            }
            // fall through
          case 50: break;
          case 11:
            { return token(sym.H3);
            }
            // fall through
          case 51: break;
          case 12:
            { return token(sym.H4);
            }
            // fall through
          case 52: break;
          case 13:
            { return token(sym.H5);
            }
            // fall through
          case 53: break;
          case 14:
            { return token(sym.H6);
            }
            // fall through
          case 54: break;
          case 15:
            { return token(sym.HR);
            }
            // fall through
          case 55: break;
          case 16:
            { return token(sym.LI);
            }
            // fall through
          case 56: break;
          case 17:
            { return token(sym.OL);
            }
            // fall through
          case 57: break;
          case 18:
            { return token(sym.TD);
            }
            // fall through
          case 58: break;
          case 19:
            { return token(sym.TH);
            }
            // fall through
          case 59: break;
          case 20:
            { return token(sym.TR);
            }
            // fall through
          case 60: break;
          case 21:
            { return token(sym.UL);
            }
            // fall through
          case 61: break;
          case 22:
            { return token(sym.SUB);
            }
            // fall through
          case 62: break;
          case 23:
            { return token(sym.SUP);
            }
            // fall through
          case 63: break;
          case 24:
            { return token(sym.BODY);
            }
            // fall through
          case 64: break;
          case 25:
            { return token(sym.FONT);
            }
            // fall through
          case 65: break;
          case 26:
            { return token(sym.FORM);
            }
            // fall through
          case 66: break;
          case 27:
            { return token(sym.HTML);
            }
            // fall through
          case 67: break;
          case 28:
            { return token(sym.LINK);
            }
            // fall through
          case 68: break;
          case 29:
            { return token(sym.FRAME);
            }
            // fall through
          case 69: break;
          case 30:
            { return token(sym.INPUT);
            }
            // fall through
          case 70: break;
          case 31:
            { return token(sym.SMALL);
            }
            // fall through
          case 71: break;
          case 32:
            { return token(sym.TABLE);
            }
            // fall through
          case 72: break;
          case 33:
            { return token(sym.TBODY);
            }
            // fall through
          case 73: break;
          case 34:
            { return token(sym.THEAD);
            }
            // fall through
          case 74: break;
          case 35:
            { return token(sym.CENTER);
            }
            // fall through
          case 75: break;
          case 36:
            { return token(sym.OPTION);
            }
            // fall through
          case 76: break;
          case 37:
            { return token(sym.SELECT);
            }
            // fall through
          case 77: break;
          case 38:
            { return token(sym.NOFRAME);
            }
            // fall through
          case 78: break;
          case 39:
            { return token(sym.FRAMESET);
            }
            // fall through
          case 79: break;
          case 40:
            { return token(sym.IMG);
            }
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
